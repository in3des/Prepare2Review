Императивный vs декларативный подход|Императивное программирование — это парадигма, основанная на составлении алгоритма действий, которые изменяют состояние (информацию/данные/память) программы.\nДекларативное программирование — это парадигма, при которой описывается желаемый результат, без составления детального алгоритма его получения.
Что такое default методы в интерфейсе и для чего они были введены?|Default-метод – это метод, который реализуется прямо в интерфейсе.\nВведены для того, чтобы при добавлении нового метода в интерфейс не приходилось править все классы, реализующие интерфейс
К каким переменным есть доступ из лямбда-выражения?|К переменным области видимости, в которой их определили. Переменные должны быть effective final
Любой анонимный класс можно заменить на лямбду?|Только анонимный класс, имплементирующий функциональный интерфейс
Расскажите про Comparator и Comparable|Comparable - маркерный интерфейс, разрешающий сравнение.\nComparator представляет отдельную реализацию и ее можно использовать многократно и с различными классами. 
Отличие BinaryOperator от Function.|BinaryOperator<T> принимает в качестве параметра два объекта типа T, выполняет над ними бинарную операцию и возвращает ее результат также в виде объекта типа T:\nФункциональный интерфейс Function<T,R> представляет функцию перехода от объекта типа T к объекту типа R:
Что такое ленивая инициализация стрима?|Отложенная (ленивая) инициализация (англ. ... Lazy initialization) — приём в программировании, когда некоторая ресурсоёмкая операция\n(создание объекта, вычисление значения) выполняется непосредственно перед тем, как будет использован её результат.\nЛенивая инициализация - это оптимизация производительности, при которой вы откладываете (потенциально дорогостоящее) создание объекта до тех пор,\nпока оно вам действительно не понадобится.
Две терминальные операции в одном выражении?|<нет ответа>
Что такое терминальная операция?|Выполняется после всех промежуточных операций и запускает весь процесс вычисления.
Что возвращают промежуточные операции над стримом?|Возвращают другой stream, то есть работают как builder
Для чего нужны параллельные стримы?|<нет ответа>
Что такое анонимный класс?|Анонимный класс не имеет имени и его создание происходит в момент инициализации объекта
Что такое функциональный интерфейс и для чего он нужен и зачем были добавлены?|Содержит только 1 абстрактный метод, но может содержать любое количество дефолтных и статическиъ методов.\nИспользуется в лямбда-выражениях и для ссылок на методы
Какой аннотацией помечается функциональный интерфейс?|@FunctionalInterface
Сколько дефолтных методов и статических методов, статических полей в интерфейсе?|...
Где находятся функциональные интерфейсы?|В пакете java.util.function
Перечислить основные семейства функ.интерфейсов. Что они принимают и что возвращают?|Consumer - void (peek, forEach)\nSupplier - T (generate)\nPredicate - boolean. (filter)\nFunction - T -> R (map)\nOperator (Unary-Binary-) - T -> T (iterate)
Какие есть способы инстацировать функциональные интерфейсы?|...
Что такое лямбда выражение и ссылка на метод. Как они связаны с анонимным классом.|Лямбда-выражение — это упрощённая запись анонимного класса, реализующего функциональный интерфейс.\nСсылка на метод - это сокращенный синтаксис выражения лямбда, который выполняет только один метод.\nЭто позволяет нам ссылаться на конструкторы или методы, не выполняя их.
Что такое Stream?|Stream API — это способ работать со структурами данных в функциональном стиле.\nЭто по своей сути поток данных
Какие бывают стримы (По разным критериям, например "конечные и бесконечные")|Бесконечные (iterate, generate) - создают бесконечный поток данных, до срабатывания условия.\nПоследовательные и параллельные - работают с многоядерностью компьютера
Чем является Stream в контексте Java?|Stream API — это способ работать со структурами данных в функциональном стиле.
В каком пакете находится Stream?|java.util.stream
Чем Stream отличается от итератора?|Iterator - простой объект, который умеет выдавать объекты по одному.\nStream - более сложный и навороченный. У стрима огромное количество методов.\nЭто средство описания алгоритмов обработки и преобразования последовательностей элементов
Сравнение стримов с коллекцией|Stream не позволяет манипулировать отдельными элементами из набора данных,\nно вместо этого позволяет выполнять функции над данными как над одним целым
Из каких частей состоит использование стримов?|1. Создание стрима\n2. Промежуточные операции (или их отсутствие)\n3. Терминальная операция (запускает весь процесс вычисления)|
В каком случае нужно закрывать стрим?|Если стрим выделял какие то системные ресурсы (работа с файлами или директориями), чтобы избежать утечек ресурса
Первый этап работы со стримом|Создание стрима
Откуда можно получить стрим?|1. Stream.empty - пустой стрим\n2. Из коллекций - Arrays.stream(array), list.stream(), map.entrySet().stream()\n3. Из файла\n4. Stream.builder\n5. Бесконечный стрим с помощью Stream.iterate(начальное_условие, выражение_генерации)\n6. Бесконечный стрим с помощью Stream.generate\n7. Параллельный стрим: collection.parallelStream()\n
Терминальные и промежуточные методы.|Промежуточные ("intermediate", ещё называют "lazy") — обрабатывают поступающие элементы и возвращают стрим.\nИх может быть много - .filter() .map() .flatMap() .sorted() .limit() .skip()\nТерминальные ("terminal", ещё называют "eager") — обрабатывают элементы и завершают работу стрима,\nтак что терминальный оператор в цепочке может быть только один - .forEach() .count() .collect(Collector collect) .reduce() .findFirst()
Разница методов .list() и walk()|Основное различие между walk* и list заключается в том , что list(dir) дает поток файлов в каталоге dir,\nв то время как оба метода walk* обходят поддерево своего аргумента, включая корень поддерева—сам каталог.
Что такое саплер-поставщик? Какой содержит метод? Как динамически получать стрим?|...
Как получить стрим диапазона чисел?|...
В чем разница методов range и rangeClosed?|range - от 0 до 100 (100 не включительно), rangeClosed - включительно
Можно ли конкатенировать стримы? Если да то каким методом? Можно ли получить пустой стрим?|...
Как получить стрим из массива?|Arrays.stream(array)
Какой второй этап работы со стримом?|Промежуточные ("intermediate", ещё называют "lazy") — обрабатывают поступающие элементы и возвращают стрим.\nИх может быть много - .filter() .map() .flatMap() .sorted() .limit() .skip()
Для чего терминальные операции? Какие бывают и что делают?|Терминальные ("terminal", ещё называют "eager") — обрабатывают элементы и завершают работу стрима,\nтак что терминальный оператор в цепочке может быть только один - .forEach() .count() .collect(Collector collect) .reduce() .findFirst()
Что такое коллекторы?|Это объект, который вычитывает все данные из потока, преобразует их к определенной коллекции и возвращает ее.\nИспользуется в методе collect() для того, чтобы перейти от потоков к привычным коллекциям — List<T>, Set<T>, Map<T, R> и другим.
Сколько раз можно вызывать терминльную операцию?|1
Что такое метод референс?|Ссылки на методы (Method References) – это компактные лямбда выражения для методов, у которых уже есть имя.\nЕсли лямбда выражения вызывают только один существующий метод, лучше ссылать на этот метод по его имени.
В чем разница между foreach и foreachordered|Разница между forEach и forEachOrdered заключается в том, что forEach позволяет обрабатывать любой элемент параллельного потока в любом порядке,\nв то время как forEachOdered всегда обрабатывает элементы параллельного потока в порядке их появления в исходном потоке.